{"version":3,"sources":["webpack:///./node_modules/ppv-gatsby-components/src/components/Search/SearchResults.tsx","webpack:///./node_modules/ppv-gatsby-components/src/pagecomponents/SearchPage/SearchPage.tsx","webpack:///./node_modules/ppv-gatsby-components/src/components/SideBar/SideBarSearch.tsx"],"names":["SearchResults","props","searchChangedHandler","q","a","updateSearch","state","posts","cnt","finished","query","SearchService","registerHandler","this","setState","trim","postData","webConfig","elasticSearchUri","_source","multi_match","fields","size","elasticSearchResultLimit","headers","Authorization","elsaticBasicAuth","res","hits","map","s","r","frontmatter","title","date","updatedate","image","subtitle","slug","author","categories","abstract","commentCnt","length","componentDidMount","undefined","window","o","getQueryObject","decodeURIComponent","componentWillUnmount","unregisterHandler","render","nestCategories","data","edges","e","node","authors","className","React","Search","header","url","description","type","tags","sidebar","isFixed","Component","Page","pageContext","location","context","pageQuery","SideBarSearch","style","marginBottom","action","method","name","target","value","textAlign","marginTop","autoComplete","placeholder","required"],"mappings":"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","file":"component---node-modules-ppv-gatsby-components-src-pagecomponents-search-page-search-page-tsx-64c3133ad4bde41d2013.js","sourcesContent":["import * as React from \"react\";\nimport { postData, nestCategories, getQueryObject } from '../../tool';\nimport { webConfig } from \"../../webConfig\";\nimport { PostList } from \"../Post/PostList\";\nimport { ICategory, IAuthor, IQueryArrayResult, IPost, IPostSummary } from '../../interfaces';\nimport { CategoryBar } from \"../CategoryBar/CategoryBar\";\nimport { SearchService } from '../../services/SearchService';\n\ninterface Props\n{\n  data: {\n    categories: IQueryArrayResult<ICategory>\n    authors: IQueryArrayResult<IAuthor>\n  }\n}\n\ninterface IQueryResult\n{\n  hits: {\n    total: {\n      value: number;\n      relation: string;\n    }\n    max_score: number;\n    hits: IHit[];\n  }\n}\n\ninterface IHit\n{\n  _source: {\n    title: string;\n    date: string;\n    updatedate: string;\n    image: string;\n    author: string;\n    subtitle: string;\n    abstract: string;\n    slug: string;\n    commentCnt: number;\n    categories: string[];\n  }\n}\n\nexport class SearchResults extends React.Component<Props, { posts: IPostSummary[], cnt: number, finished: boolean, query: string}>\n{\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      posts: [],\n      cnt: 0,\n      finished: false,\n      query: \"\"\n    };\n    SearchService.registerHandler(this.searchChangedHandler)\n  }\n  \n  searchChangedHandler = async (q) => {\n    await this.updateSearch(q);\n  }\n  \n  async updateSearch(query: string)\n  {\n    try \n    {\n      this.setState({\n        query,\n        finished: false\n      });\n      if(query != null && query.trim() != \"\")\n      {\n        let res = await postData<IQueryResult>(webConfig.elasticSearchUri + \"/docs/_search?pretty=true\", {\n          _source: [\"slug\", \"abstract\", \"title\", \"subtitle\", \"updatedate\", \"date\", \"author\", \"image\", \"categories\", \"commentCnt\"],\n          query: {\n            multi_match: {\n              query: query,\n              fields: [\"tags\", \"title\", \"subtitle\", \"abstract\", \"author\", \"text\"]\n            }\n          },\n          size: webConfig.elasticSearchResultLimit\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Basic \"+webConfig.elsaticBasicAuth\n          }\n        });\n        \n        if(res && res.hits && res.hits.hits)\n        {\n          this.setState({\n            posts: res.hits.hits.map(s => {\n              let r = s._source;\n              return {\n                frontmatter: {\n                  title: r.title,\n                  date: r.date,\n                  updatedate: r.updatedate,\n                  image: r.image,\n                  subtitle: r.subtitle,\n                  slug: r.slug,\n                  author: r.author,\n                  categories: r.categories,\n                },\n                fields: {\n                  abstract: r.abstract,\n                  commentCnt: r.commentCnt\n                }\n              }\n            }),\n            cnt: res.hits.hits.length,\n            finished: true\n          });\n        }\n      }\n    }\n    catch(error)\n    {\n      \n    }\n    finally\n    {\n      this.setState({\n        finished: true\n      })\n    }\n  }\n  \n  async componentDidMount()\n  {\n    if(typeof window !== undefined)\n    {\n      let o = getQueryObject();\n      let query = decodeURIComponent(o.query);\n      this.updateSearch(query);\n    }\n  }\n  \n  componentWillUnmount()\n  {\n    SearchService.unregisterHandler(this.searchChangedHandler);\n  }\n  \n  render()\n  {\n    let categories = nestCategories(this.props.data.categories.edges.map(e => e.node));\n    let authors    = this.props.data.authors.edges.map(e => e.node);\n    \n    return (\n      <div className=\"search-results-container\">\n        {\n          this.state.finished == true ? (\n            <>\n              <CategoryBar title={`${this.state.cnt} Suchergebnisse fÃ¼r '${this.state.query}'`}/>\n              <PostList posts={this.state.posts} categories={categories} authors={authors}></PostList>\n            </>\n          ) : (\n            <CategoryBar title={`Lade Ergebnisse...`}/>\n          )\n        }\n      </div>\n    )\n  }\n}\n","import { graphql } from \"gatsby\";\r\nimport React from \"react\";\r\nimport { IQueryArrayResult, ICategory, IAuthor, IPost, ITag, IGatsbyLocation } from '../../interfaces';\r\nimport { ContentLayoutWithSidebar } from '../../components/Layout/ContentLayout';\r\nimport { SideBar } from \"../../components/SideBar/SideBar\";\r\nimport { nestCategories, getCategory, urlJoin } from '../../tool';\r\nimport { SideBarQuickstart } from \"../../components/SideBar/SideBarQuickstart\";\r\nimport { SideBarHelp } from \"../../components/SideBar/SideBarHelp\";\r\nimport { SideBarSearch } from \"../../components/SideBar/SideBarSearch\";\r\nimport SideBarCategories from \"../../components/SideBar/SideBarCategories\";\r\nimport { CategoryBar } from \"../../components/CategoryBar/CategoryBar\";\r\nimport { PostList } from '../../components/Post/PostList';\r\nimport { IHeaderProps } from \"../../components/Layout/Header\";\r\nimport { SearchResults } from '../../components/Search/SearchResults';\r\n\r\ninterface IQueryResult\r\n{\r\n  data: {\r\n    categories: IQueryArrayResult<ICategory>\r\n    authors: IQueryArrayResult<IAuthor>\r\n  };\r\n  context: any;\r\n  location: IGatsbyLocation;\r\n}\r\n\r\n\r\nexport class Search extends React.Component<IQueryResult>\r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n  }\r\n  render(){\r\n    let header: IHeaderProps = {\r\n      url: \"search\",\r\n      description: `Sucherergebnisse`,\r\n      type: \"object\",\r\n      title: `Suchergebnisse`,\r\n      tags: [\"search\"]\r\n    }\r\n    let query = \"power\";\r\n    return (\r\n      <ContentLayoutWithSidebar\r\n      header={header} \r\n      sidebar={(\r\n        <SideBar isFixed={true}>\r\n          <SideBarQuickstart></SideBarQuickstart>\r\n          <SideBarHelp></SideBarHelp>\r\n          <SideBarSearch></SideBarSearch>\r\n          <SideBarCategories></SideBarCategories>\r\n        </SideBar>\r\n      )} \r\n      >\r\n      <SearchResults data={this.props.data}></SearchResults>\r\n      </ContentLayoutWithSidebar>\r\n    )\r\n  }\r\n}\r\n\r\nconst Page = ({pageContext, data, location}) => {\r\n  return (\r\n    <Search data={data} location={location} context={pageContext}></Search>\r\n  );\r\n};\r\nexport default Page;\r\n\r\nexport const pageQuery = graphql`\r\n{\r\n    ...categories\r\n    ...authorsMarkdown\r\n}\r\n`;\r\n","import React from \"react\";\r\nimport \"./SideBar.sass\";\r\nimport { Link } from \"gatsby\";\r\n\r\nexport class SideBarSearch extends React.Component<{}>\r\n{\r\n\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"sidebar-component\">\r\n        <div className=\"sidebar-header\">\r\n            Artikel mit Google durchsuchen\r\n        </div>\r\n        <div className=\"sidebar-content\">\r\n        \r\n        \r\n          <div className=\"sidebar-content-pad\">\r\n            <div style={{marginBottom: \"5px\"}}>\r\n              <form action=\"https://www.google.com/search\" className=\"searchform\" method=\"get\" name=\"searchform\" target=\"_blank\">\r\n                <input name=\"sitesearch\" type=\"hidden\" value=\"powerpivotinsights.de\"/>\r\n                \r\n                <div style={{textAlign: \"center\", marginTop: \"5px\"}}>\r\n                  <input  autoComplete=\"on\" className=\"form-control search\" name=\"q\" placeholder=\"\" required={true}  type=\"text\"/>\r\n                </div>\r\n                <div style={{textAlign: \"center\", marginTop: \"5px\"}}>\r\n                  <button className=\"button action-button\" type=\"submit\">Suchen</button>\r\n              </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          \r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}"],"sourceRoot":""}